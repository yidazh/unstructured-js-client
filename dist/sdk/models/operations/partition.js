"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.partitionResponseFromJSON = exports.partitionResponseToJSON = exports.PartitionResponse$ = exports.PartitionResponse$outboundSchema = exports.PartitionResponse$inboundSchema = exports.partitionRequestFromJSON = exports.partitionRequestToJSON = exports.PartitionRequest$ = exports.PartitionRequest$outboundSchema = exports.PartitionRequest$inboundSchema = void 0;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../../lib/primitives.js");
const schemas_js_1 = require("../../../lib/schemas.js");
const shared = __importStar(require("../shared/index.js"));
/** @internal */
exports.PartitionRequest$inboundSchema = z.object({
    partition_parameters: shared.PartitionParameters$inboundSchema,
    "unstructured-api-key": z.nullable(z.string()).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "partition_parameters": "partitionParameters",
        "unstructured-api-key": "unstructuredApiKey",
    });
});
/** @internal */
exports.PartitionRequest$outboundSchema = z.object({
    partitionParameters: shared.PartitionParameters$outboundSchema,
    unstructuredApiKey: z.nullable(z.string()).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        partitionParameters: "partition_parameters",
        unstructuredApiKey: "unstructured-api-key",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PartitionRequest$;
(function (PartitionRequest$) {
    /** @deprecated use `PartitionRequest$inboundSchema` instead. */
    PartitionRequest$.inboundSchema = exports.PartitionRequest$inboundSchema;
    /** @deprecated use `PartitionRequest$outboundSchema` instead. */
    PartitionRequest$.outboundSchema = exports.PartitionRequest$outboundSchema;
})(PartitionRequest$ || (exports.PartitionRequest$ = PartitionRequest$ = {}));
function partitionRequestToJSON(partitionRequest) {
    return JSON.stringify(exports.PartitionRequest$outboundSchema.parse(partitionRequest));
}
exports.partitionRequestToJSON = partitionRequestToJSON;
function partitionRequestFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.PartitionRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PartitionRequest' from JSON`);
}
exports.partitionRequestFromJSON = partitionRequestFromJSON;
/** @internal */
exports.PartitionResponse$inboundSchema = z.object({
    ContentType: z.string(),
    StatusCode: z.number().int(),
    RawResponse: z.instanceof(Response),
    csv_elements: z.string().optional(),
    elements: z.array(z.record(z.any())).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "ContentType": "contentType",
        "StatusCode": "statusCode",
        "RawResponse": "rawResponse",
        "csv_elements": "csvElements",
    });
});
/** @internal */
exports.PartitionResponse$outboundSchema = z.object({
    contentType: z.string(),
    statusCode: z.number().int(),
    rawResponse: z.instanceof(Response).transform(() => {
        throw new Error("Response cannot be serialized");
    }),
    csvElements: z.string().optional(),
    elements: z.array(z.record(z.any())).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        contentType: "ContentType",
        statusCode: "StatusCode",
        rawResponse: "RawResponse",
        csvElements: "csv_elements",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PartitionResponse$;
(function (PartitionResponse$) {
    /** @deprecated use `PartitionResponse$inboundSchema` instead. */
    PartitionResponse$.inboundSchema = exports.PartitionResponse$inboundSchema;
    /** @deprecated use `PartitionResponse$outboundSchema` instead. */
    PartitionResponse$.outboundSchema = exports.PartitionResponse$outboundSchema;
})(PartitionResponse$ || (exports.PartitionResponse$ = PartitionResponse$ = {}));
function partitionResponseToJSON(partitionResponse) {
    return JSON.stringify(exports.PartitionResponse$outboundSchema.parse(partitionResponse));
}
exports.partitionResponseToJSON = partitionResponseToJSON;
function partitionResponseFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.PartitionResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PartitionResponse' from JSON`);
}
exports.partitionResponseFromJSON = partitionResponseFromJSON;
//# sourceMappingURL=partition.js.map