"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generalPartition = exports.PartitionAcceptEnum = void 0;
const encodings_js_1 = require("../lib/encodings.js");
const files_js_1 = require("../lib/files.js");
const M = __importStar(require("../lib/matchers.js"));
const primitives_js_1 = require("../lib/primitives.js");
const schemas_js_1 = require("../lib/schemas.js");
const security_js_1 = require("../lib/security.js");
const url_js_1 = require("../lib/url.js");
const errors = __importStar(require("../sdk/models/errors/index.js"));
const operations = __importStar(require("../sdk/models/operations/index.js"));
const blobs_js_1 = require("../sdk/types/blobs.js");
const streams_js_1 = require("../sdk/types/streams.js");
var PartitionAcceptEnum;
(function (PartitionAcceptEnum) {
    PartitionAcceptEnum["applicationJson"] = "application/json";
    PartitionAcceptEnum["textCsv"] = "text/csv";
})(PartitionAcceptEnum || (exports.PartitionAcceptEnum = PartitionAcceptEnum = {}));
/**
 * Summary
 *
 * @remarks
 * Description
 */
async function generalPartition(client, request, options) {
    const parsed = (0, schemas_js_1.safeParse)(request, (value) => operations.PartitionRequest$outboundSchema.parse(value), "Input validation failed");
    if (!parsed.ok) {
        return parsed;
    }
    const payload = parsed.value;
    const body = new FormData();
    if ((0, blobs_js_1.isBlobLike)(payload.partition_parameters.files)) {
        (0, encodings_js_1.appendForm)(body, "files", payload.partition_parameters.files);
    }
    else if ((0, streams_js_1.isReadableStream)(payload.partition_parameters.files.content)) {
        const buffer = await (0, files_js_1.readableStreamToArrayBuffer)(payload.partition_parameters.files.content);
        const blob = new Blob([buffer], { type: "application/octet-stream" });
        (0, encodings_js_1.appendForm)(body, "files", blob);
    }
    else {
        (0, encodings_js_1.appendForm)(body, "files", new Blob([payload.partition_parameters.files.content], {
            type: "application/octet-stream",
        }), payload.partition_parameters.files.fileName);
    }
    if (payload.partition_parameters.chunking_strategy !== undefined) {
        (0, encodings_js_1.appendForm)(body, "chunking_strategy", payload.partition_parameters.chunking_strategy);
    }
    if (payload.partition_parameters.combine_under_n_chars !== undefined) {
        (0, encodings_js_1.appendForm)(body, "combine_under_n_chars", payload.partition_parameters.combine_under_n_chars);
    }
    if (payload.partition_parameters.content_type !== undefined) {
        (0, encodings_js_1.appendForm)(body, "content_type", payload.partition_parameters.content_type);
    }
    if (payload.partition_parameters.coordinates !== undefined) {
        (0, encodings_js_1.appendForm)(body, "coordinates", payload.partition_parameters.coordinates);
    }
    if (payload.partition_parameters.encoding !== undefined) {
        (0, encodings_js_1.appendForm)(body, "encoding", payload.partition_parameters.encoding);
    }
    if (payload.partition_parameters.extract_image_block_types !== undefined) {
        (0, encodings_js_1.appendForm)(body, "extract_image_block_types", payload.partition_parameters.extract_image_block_types);
    }
    if (payload.partition_parameters.gz_uncompressed_content_type !== undefined) {
        (0, encodings_js_1.appendForm)(body, "gz_uncompressed_content_type", payload.partition_parameters.gz_uncompressed_content_type);
    }
    if (payload.partition_parameters.hi_res_model_name !== undefined) {
        (0, encodings_js_1.appendForm)(body, "hi_res_model_name", payload.partition_parameters.hi_res_model_name);
    }
    if (payload.partition_parameters.include_orig_elements !== undefined) {
        (0, encodings_js_1.appendForm)(body, "include_orig_elements", payload.partition_parameters.include_orig_elements);
    }
    if (payload.partition_parameters.include_page_breaks !== undefined) {
        (0, encodings_js_1.appendForm)(body, "include_page_breaks", payload.partition_parameters.include_page_breaks);
    }
    if (payload.partition_parameters.include_slide_notes !== undefined) {
        (0, encodings_js_1.appendForm)(body, "include_slide_notes", payload.partition_parameters.include_slide_notes);
    }
    if (payload.partition_parameters.languages !== undefined) {
        (0, encodings_js_1.appendForm)(body, "languages", payload.partition_parameters.languages);
    }
    if (payload.partition_parameters.max_characters !== undefined) {
        (0, encodings_js_1.appendForm)(body, "max_characters", payload.partition_parameters.max_characters);
    }
    if (payload.partition_parameters.multipage_sections !== undefined) {
        (0, encodings_js_1.appendForm)(body, "multipage_sections", payload.partition_parameters.multipage_sections);
    }
    if (payload.partition_parameters.new_after_n_chars !== undefined) {
        (0, encodings_js_1.appendForm)(body, "new_after_n_chars", payload.partition_parameters.new_after_n_chars);
    }
    if (payload.partition_parameters.ocr_languages !== undefined) {
        (0, encodings_js_1.appendForm)(body, "ocr_languages", payload.partition_parameters.ocr_languages);
    }
    if (payload.partition_parameters.output_format !== undefined) {
        (0, encodings_js_1.appendForm)(body, "output_format", payload.partition_parameters.output_format);
    }
    if (payload.partition_parameters.overlap !== undefined) {
        (0, encodings_js_1.appendForm)(body, "overlap", payload.partition_parameters.overlap);
    }
    if (payload.partition_parameters.overlap_all !== undefined) {
        (0, encodings_js_1.appendForm)(body, "overlap_all", payload.partition_parameters.overlap_all);
    }
    if (payload.partition_parameters.pdf_infer_table_structure !== undefined) {
        (0, encodings_js_1.appendForm)(body, "pdf_infer_table_structure", payload.partition_parameters.pdf_infer_table_structure);
    }
    if (payload.partition_parameters.similarity_threshold !== undefined) {
        (0, encodings_js_1.appendForm)(body, "similarity_threshold", payload.partition_parameters.similarity_threshold);
    }
    if (payload.partition_parameters.skip_infer_table_types !== undefined) {
        (0, encodings_js_1.appendForm)(body, "skip_infer_table_types", payload.partition_parameters.skip_infer_table_types);
    }
    if (payload.partition_parameters.split_pdf_allow_failed !== undefined) {
        (0, encodings_js_1.appendForm)(body, "split_pdf_allow_failed", payload.partition_parameters.split_pdf_allow_failed);
    }
    if (payload.partition_parameters.split_pdf_concurrency_level !== undefined) {
        (0, encodings_js_1.appendForm)(body, "split_pdf_concurrency_level", payload.partition_parameters.split_pdf_concurrency_level);
    }
    if (payload.partition_parameters.split_pdf_page !== undefined) {
        (0, encodings_js_1.appendForm)(body, "split_pdf_page", payload.partition_parameters.split_pdf_page);
    }
    if (payload.partition_parameters.split_pdf_page_range !== undefined) {
        (0, encodings_js_1.appendForm)(body, "split_pdf_page_range", payload.partition_parameters.split_pdf_page_range);
    }
    if (payload.partition_parameters.starting_page_number !== undefined) {
        (0, encodings_js_1.appendForm)(body, "starting_page_number", payload.partition_parameters.starting_page_number);
    }
    if (payload.partition_parameters.strategy !== undefined) {
        (0, encodings_js_1.appendForm)(body, "strategy", payload.partition_parameters.strategy);
    }
    if (payload.partition_parameters.table_ocr_agent !== undefined) {
        (0, encodings_js_1.appendForm)(body, "table_ocr_agent", payload.partition_parameters.table_ocr_agent);
    }
    if (payload.partition_parameters.unique_element_ids !== undefined) {
        (0, encodings_js_1.appendForm)(body, "unique_element_ids", payload.partition_parameters.unique_element_ids);
    }
    if (payload.partition_parameters.xml_keep_tags !== undefined) {
        (0, encodings_js_1.appendForm)(body, "xml_keep_tags", payload.partition_parameters.xml_keep_tags);
    }
    // add sort_mode parameter
    if (payload.partition_parameters.sort_mode !== undefined) {
        (0, encodings_js_1.appendForm)(body, "sort_mode", payload.partition_parameters.sort_mode);
    }
    const path = (0, url_js_1.pathToFunc)("/general/v0/general")();
    const headers = new Headers((0, primitives_js_1.compactMap)({
        Accept: options?.acceptHeaderOverride
            || "application/json;q=1, text/csv;q=0",
        "unstructured-api-key": (0, encodings_js_1.encodeSimple)("unstructured-api-key", payload["unstructured-api-key"], { explode: false, charEncoding: "none" }),
    }));
    const securityInput = await (0, security_js_1.extractSecurity)(client._options.security);
    const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
    const context = {
        operationID: "partition",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.security,
        retryConfig: options?.retries
            || client._options.retryConfig
            || {
                strategy: "backoff",
                backoff: {
                    initialInterval: 3000,
                    maxInterval: 720000,
                    exponent: 1.88,
                    maxElapsedTime: 1800000,
                },
                retryConnectionErrors: true,
            }
            || { strategy: "none" },
        retryCodes: options?.retryCodes || ["502", "503", "504"],
    };
    const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "POST",
        baseURL: options?.serverURL,
        path: path,
        headers: headers,
        body: body,
        timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1,
    }, options);
    if (!requestRes.ok) {
        return requestRes;
    }
    const req = requestRes.value;
    const doResult = await client._do(req, {
        context,
        errorCodes: ["422", "4XX", "5XX"],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes,
    });
    if (!doResult.ok) {
        return doResult;
    }
    const response = doResult.value;
    const responseFields = {
        ContentType: response.headers.get("content-type")
            ?? "application/octet-stream",
        StatusCode: response.status,
        RawResponse: response,
        Headers: {},
    };
    const [result] = await M.match(M.json(200, operations.PartitionResponse$inboundSchema, {
        key: "elements",
    }), M.text(200, operations.PartitionResponse$inboundSchema, {
        ctype: "text/csv",
        key: "csv_elements",
    }), M.jsonErr(422, errors.HTTPValidationError$inboundSchema), M.fail("4XX"), M.jsonErr("5XX", errors.ServerError$inboundSchema))(response, { extraFields: responseFields });
    if (!result.ok) {
        return result;
    }
    return result;
}
exports.generalPartition = generalPartition;
//# sourceMappingURL=generalPartition.js.map